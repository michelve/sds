/**
 * Simple Bootstrap Variables Generator
 * 
 * Generates Bootstrap SCSS variables from SDS tokens using the mapping configuration
 */

import { bootstrapMapping } from './bootstrap5.mapping.js';
import { TokenAnalyzer } from './token-analyzer.js';
import fs from 'fs';
import path from 'path';

// Load token analyzer
const analyzer = new TokenAnalyzer();

try {
  // Load tokens
  console.log('Loading SDS tokens...');
  analyzer.loadTokens('tokens.json');
  console.log(`‚úÖ Loaded ${analyzer.getTokenCount()} SDS tokens`);
  
  // Generate Bootstrap variables
  console.log('Generating Bootstrap variables...');
  
  let scssOutput = `//
// Bootstrap Variables
// Generated from SDS Design Tokens
//
// This file contains Bootstrap-compatible SCSS variables mapped from the SDS design system.
// Do not edit this file directly - update the source design tokens instead.
//

`;
  
  let cssOutput = `/*
 * Bootstrap CSS Custom Properties
 * Generated from SDS Design Tokens
 */

:root {
`;
  
  let validMappings = 0;
  let invalidMappings = 0;
  
  // Process each mapping
  for (const [bootstrapVar, mapping] of Object.entries(bootstrapMapping)) {
    const tokenExists = analyzer.hasToken(mapping.token);
    
    if (tokenExists) {
      const tokenValue = analyzer.getToken(mapping.token);
      
      // SCSS variable
      scssOutput += `${bootstrapVar}: ${tokenValue};\n`;
      
      // CSS custom property
      const cssVarName = bootstrapVar.replace('$', '--bs-');
      cssOutput += `  ${cssVarName}: ${tokenValue};\n`;
      
      validMappings++;
    } else {
      scssOutput += `// ${bootstrapVar}: /* Token not found: ${mapping.token} */\n`;
      invalidMappings++;
    }
  }
  
  cssOutput += `}\n`;
  
  // Ensure output directory exists
  const outputDir = path.resolve(process.cwd(), 'dist/bootstrap');
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }
  
  // Write files
  fs.writeFileSync(path.join(outputDir, '_variables.scss'), scssOutput);
  fs.writeFileSync(path.join(outputDir, 'bootstrap-tokens.css'), cssOutput);
  
  // Generate usage documentation
  const readmeContent = `# Bootstrap + SDS Integration

## Generated Files

- \`_variables.scss\` - Bootstrap variables mapped to SDS design tokens
- \`bootstrap-tokens.css\` - CSS custom properties for Bootstrap integration

## Statistics

- Total mappings: ${Object.keys(bootstrapMapping).length}
- Valid mappings: ${validMappings}
- Invalid mappings: ${invalidMappings}
- Success rate: ${Math.round((validMappings / Object.keys(bootstrapMapping).length) * 100)}%

## Usage

### SCSS Integration
\`\`\`scss
@import 'path/to/dist/bootstrap/_variables';
@import '~bootstrap/scss/bootstrap';
\`\`\`

### CSS Custom Properties
\`\`\`html
<link rel="stylesheet" href="path/to/dist/bootstrap/bootstrap-tokens.css">
<link rel="stylesheet" href="path/to/bootstrap.min.css">
\`\`\`

Generated on: ${new Date().toISOString()}
`;
  
  fs.writeFileSync(path.join(outputDir, 'README.md'), readmeContent);
  
  console.log(`‚úÖ Generated Bootstrap files in ${outputDir}`);
  console.log(`   ‚Ä¢ _variables.scss (${validMappings} variables)`);
  console.log(`   ‚Ä¢ bootstrap-tokens.css (${validMappings} custom properties)`);
  console.log(`   ‚Ä¢ README.md (usage documentation)`);
  
  if (invalidMappings > 0) {
    console.log(`‚ö†Ô∏è  Warning: ${invalidMappings} invalid mappings found`);
  }
  
  console.log('\nüéâ Bootstrap build completed successfully!');
  
} catch (error) {
  console.error('‚ùå Build failed:', error.message);
  process.exit(1);
}